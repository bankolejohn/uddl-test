/*
 * generated by Xtext 2.33.0
 */
/*
 * Copyright (c) 2022 - 2024 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.validation;

import java.lang.invoke.MethodHandles;
import java.text.MessageFormat;
import java.util.Map;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.EMFPlugin;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EPackageRegistryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.ocl.internal.helper.PluginFinder;
import org.eclipse.ocl.pivot.model.OCLstdlib;
import org.eclipse.ocl.pivot.utilities.OCL;
import org.eclipse.ocl.pivot.validation.ValidationRegistryAdapter;
import org.eclipse.ocl.xtext.completeocl.CompleteOCLStandaloneSetup;
//import org.eclipse.swt.widgets.Display; - if we use this, it must be in the UI project
//import org.eclipse.emf.edit.ui.action.LoadResourceAction.LoadResourceDialog; // if we use this, it must be in the UI project
//import org.eclipse.ocl.pivot.utilities.OCL;
//import org.eclipse.ocl.pivot.utilities.ThreadLocalExecutor;
import org.eclipse.ocl.xtext.completeocl.validation.CompleteOCLEObjectValidator;
import org.eclipse.ocl.xtext.oclstdlib.OCLstdlibStandaloneSetup;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.validation.EValidatorRegistrar;

import com.epistimis.uddl.uddl.ConceptualAssociation;
import com.epistimis.uddl.uddl.ConceptualEntity;
import com.epistimis.uddl.uddl.LogicalAssociation;
import com.epistimis.uddl.uddl.LogicalEntity;
import com.epistimis.uddl.uddl.PlatformAssociation;
import com.epistimis.uddl.uddl.PlatformEntity;
import com.epistimis.uddl.uddl.UddlPackage;
import com.google.inject.Guice;
import com.google.inject.Inject;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class UddlValidator extends AbstractUddlValidator {

	private static Logger logger = Logger.getLogger(MethodHandles.lookup().lookupClass());

	static ClassLoader classLoader = UddlValidator.class.getClassLoader();

	protected static OCL ocl;
	protected static ResourceSet resourceSet;
	protected static ValidationRegistryAdapter vra;

	//private static Map<String, ValidationRegistryAdapter> resourceAdaptors = new HashMap<>();

	@Inject
	protected IQualifiedNameProvider qnp;

	static ConceptualEntityValidator cev = new ConceptualEntityValidator();
	static LogicalEntityValidator lev = new LogicalEntityValidator();
	static PlatformEntityValidator pev = new PlatformEntityValidator();

	public static String ISSUE_CODE_PREFIX = "com.epistimis.uddl.";

	static {
		// Per
		// https://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.ocl.doc%2Fhelp%2FPivotThreadSafety.html
		org.eclipse.ocl.pivot.utilities.ValueUtil.initAllStatics();
	}

	public UddlValidator() {
		// Since we're going to use OCL, make sure we can
//		doCompleteOCLSetup();
//		doOCLstdlibSetup();
//		ResourcesPlugin.getWorkspace();
	}

	public IQualifiedNameProvider getQNP() {
		return this.qnp;
	}

	public ClassLoader getClzLoader() {
		return UddlValidator.classLoader;
	}

	public EPackage getPackage() {
		return UddlPackage.eINSTANCE;
	}

	public String getPluginID() {
		return com.epistimis.uddl.UddlRuntimeModule.PLUGIN_ID;
	}

	protected void augmentRegistry(EPackage.Registry registry) {
		registry.put(UddlPackage.eNS_URI, UddlPackage.eINSTANCE);
	}

	/**
	 * In case we need a minimal registry (standalone runs - where we need to create
	 * the resource set as well) See
	 * https://eclipse.googlesource.com/ocl/org.eclipse.ocl/+/refs/heads/master/tests/org.eclipse.ocl.examples.xtext.tests/src/org/eclipse/ocl/examples/test/xtext/PivotDocumentationExamples.java
	 * 
	 * @return a Package Registry for this package
	 */
	protected EPackage.Registry createMinimalRegistry() {

		EPackage.Registry registry = new EPackageRegistryImpl();
		registry.put(UddlPackage.eNS_URI, UddlPackage.eINSTANCE);
		return registry;
	}

	/**
	 * Get an appropriate URI to load a file
	 * 
	 * @param localFileName - relative to the plugin root directory (not the Maven
	 *                      parent directory) - see examples
	 * @return a properly constructed URI
	 */
	protected @NonNull URI getInputURI(@NonNull String localFileName) {
		return FileLoadingSupport.getInputURI(localFileName, getPluginID());
	}

	/**
	 * Perform the appropriate initialization to support Complete OCL parsing and
	 * editing using Xtext. NB. This must be called before setUp() creates a
	 * GlobalStateMemento if the aggressive DEBUG_GC garbage collection is enabled.
	 * 
	 * Taken from:
	 * https://eclipse.googlesource.com/ocl/org.eclipse.ocl/+/refs/heads/master/tests/org.eclipse.ocl.examples.xtext.tests/src/org/eclipse/ocl/examples/xtext/tests/TestUtil.java
	 */
	public static void doCompleteOCLSetup() {
		if (!EMFPlugin.IS_ECLIPSE_RUNNING) {
			CompleteOCLStandaloneSetup.doSetup();
		} else {
			Guice.createInjector(new org.eclipse.ocl.xtext.completeocl.CompleteOCLRuntimeModule());
		}
	}

	/**
	 * Perform the appropriate initialization to support OCLstdlib parsing and
	 * editing using Xtext. NB. This must be called before setUp() creates a
	 * GlobalStateMemento if the aggressive DEBUG_GC garbage collection is enabled.
	 * 
	 * Taken from
	 * https://eclipse.googlesource.com/ocl/org.eclipse.ocl/+/refs/heads/master/tests/org.eclipse.ocl.examples.xtext.tests/src/org/eclipse/ocl/examples/xtext/tests/TestUtil.java
	 */
	public static void doOCLstdlibSetup() {
		if (!EMFPlugin.IS_ECLIPSE_RUNNING) {
			OCLstdlibStandaloneSetup.doSetup(); // FIXME BUG 382058
		} else {
			Guice.createInjector(new org.eclipse.ocl.xtext.oclstdlib.OCLstdlibRuntimeModule());
		}
	}

	/**
	 * Ensure that resourceSet can be used to resolve resources from bundleNames.
	 *
	 * If Eclipse is running all registered bundles are made available.
	 *
	 * If standalone only those explicitly named bundleNames are resolved on the
	 * classPath.
	 * 
	 * Taken from org.eclipse.ocl.tests.GenericTestSuite.java
	 */
	public static void initializeResourceSet(ResourceSet resourceSet, String... bundleNames) {
		Map<URI, URI> uriMap = resourceSet.getURIConverter().getURIMap();
		if (EcorePlugin.IS_ECLIPSE_RUNNING) {
			EcorePlugin.ExtensionProcessor.process(null);
			Map<URI, URI> computePlatformURIMap = EcorePlugin.computePlatformURIMap(true);
			uriMap.putAll(computePlatformURIMap);
		} else {
			PluginFinder finder = new PluginFinder(bundleNames);
			finder.resolve();
			for (String bundleName : bundleNames) {
				URI pluginURI = URI.createPlatformPluginURI(bundleName + "/", true);
				URI resourceURI = URI.createPlatformResourceURI(bundleName + "/", true);
				URI locationURI = finder.getURI(bundleName);
				if (locationURI != null) {
					uriMap.put(resourceURI, pluginURI);
					uriMap.put(pluginURI, locationURI);
				} else {
					logger.error("initializeResourceSet failed to resolve '" + bundleName + "'");
				}
			}
		}
	}

	protected void loadAndRegister(EValidatorRegistrar registrar, String resourceToLoad) {
		EPackage ePackage = getPackage();
		loadAndRegister(registrar, resourceToLoad, ePackage);
	}

//	static class COLoader extends CompleteOCLLoader {
//		ValidationMessageAcceptor vma;
//		
//		COLoader(ValidationMessageAcceptor vma, EnvironmentFactoryInternal ef) {
//			super(ef);
//			this.vma =  vma;
//		}
//		@Override
//		protected boolean error(@NonNull String primaryMessage, @Nullable String detailMessage) {
//			logger.error(primaryMessage);
////			protected void error(String message, EObject source, EStructuralFeature feature, String code, String... issueData) {
//
////			// This error message should go to the Problems pane
////			Display.getDefault().asyncExec(new Runnable()
////			{
////				@Override
////				public void run() {
////					ResourceDialog.this.error(primaryMessage, detailMessage);
////				}
////			});
//			return false;
//		}
//	};

	protected ValidationRegistryAdapter getValidationRegistryAdapter() {
		if (ocl == null) {
			synchronized (UddlValidator.class) {
				/**
				 * Use of CLASS_PATH should make everything in the workspace accessible - which
				 * is what we want. It has the side effect of making OCL responsible for the
				 * resources. But we don't dispose of OCL until we exit the application because
				 * it's static here, so that shouldn't matter.
				 */
				ocl = OCL.newInstance(OCL.CLASS_PATH);
				resourceSet = ocl.getResourceSet();
				/**
				 * This call to initialize the ResourceSet assumes running inside Eclispe since
				 * no bundle names are listed
				 */
				//initializeResourceSet(resourceSet);
				vra = ValidationRegistryAdapter.getAdapter(resourceSet);				
			}
		}
		return vra;

	}

	protected void loadAndRegister(EValidatorRegistrar registrar, String oclResourceToLoad, EPackage ePackage) {
//			 ServiceCaller.callOnce(getClass(), IWorkspace.class, workspace -> {
//				 	// do something with the workspace
//				 	IWorkspaceRoot root = workspace.getRoot();
//				 	root.
//				 });

		/**
		 * NOTE: AbstractInjectableValidator::register registers 'this' validator for
		 * the entire inheritance hierarchy ( because of the base class implementation
		 * of getEPackages() ).
		 * 
		 * ?We do something similar here because the OCL could refer to any of the
		 * packages in the hierarchy?
		 * 
		 * 
		 * See
		 * https://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.ocl.doc%2Fhelp%2FInstallation.html
		 * for sample code
		 * 
		 * getInputURI replaces that example's URI creation
		 */
		URI oclURI = getInputURI(oclResourceToLoad);
		CompleteOCLEObjectValidator v = new CompleteOCLEObjectValidator(ePackage, oclURI);
		ValidationRegistryAdapter vra = getValidationRegistryAdapter();
		for (EPackage pkg : getEPackages()) {
			vra.put(pkg, v);
//			registrar.register(pkg, v);
		}
		logger.debug(MessageFormat.format("Validator constructed from {0} and registered", oclResourceToLoad));
	}

	protected void loadOCLAndRegister(EValidatorRegistrar registrar, String resourceAddress, EPackage ePackage,
			@NonNull String pluginId) {
		/**
		 * NOTE: AbstractInjectableValidator::register registers validators for the
		 * entire inheritance hierarchy ( because of the base class implementation of
		 * getEPackages() )
		 * 
		 * This does not do that. Each OCL file is associated with a specific package,
		 * so it need not be registered to others. If there is a need, manually
		 * re-register the OCL file for multiple packages.
		 * 
		 * See
		 * https://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.ocl.doc%2Fhelp%2FInstallation.html
		 * for sample code
		 * 
		 * or
		 * https://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.ocl.doc%2Fhelp%2FEvaluatingConstraints.html
		 * 
		 * getInputURI replaces that example's URI creation
		 */
		URI oclURI = FileLoadingSupport.getInputURI(resourceAddress, pluginId);
		registrar.register(ePackage, new CompleteOCLEObjectValidator(ePackage, oclURI));
	}

	@Override
	public void register(EValidatorRegistrar registrar) {
		super.register(registrar);

		/**
		 * Registrations here are for OCL we ALWAYS want available. These provide
		 * foundational rules about the UDDL metamodel
		 */
//		loadOCLAndRegister(registrar, "src/com/epistimis/uddl/constraints/all-invariants.ocl", UddlPackage.eINSTANCE,
//				com.epistimis.uddl.UddlRuntimeModule.PLUGIN_ID);

		// TODO: May want to use this - or not - this should be recreated in the above
//      loadOCLAndRegister(registrar,"src/com/epistimis/uddl/constraints/all-standard-opt-invariants.ocl"	,UddlPackage.eINSTANCE,com.epistimis.uddl.UddlRuntimeModule.PLUGIN_ID);
//      loadOCLAndRegister(registrar,"src/com/epistimis/uddl/constraints/realizedObservables.ocl"	,UddlPackage.eINSTANCE,com.epistimis.uddl.UddlRuntimeModule.PLUGIN_ID);

		/**
		 * TODO: These don't appear to be having any effect. It could be because we have
		 * no way to invoke the validators created here. Or that they are invoked and
		 * fail silently. Or is it because they are created by a newly created
		 * environmentFactory (i.e., should the CompleteOCLEObjectValidator constructor
		 * take more parameters?)
		 * 
		 * Commented out to eliminate potential performance problems. These should be
		 * loaded and run only on command - not here where they get triggered in the
		 * editor constantly.
		 */

		// Per https://www.eclipse.org/forums/index.php/t/1092285/, calling this before
		// registering OCL validators
		// may have made thing worse in the past - so call it here - after registration
		// but before use
		OCLstdlib.install();

	}

	/**
	 * Common functionality needed before doing validation
	 * 
	 * @param obj
	 */
//	protected void setupValidation(EObject obj) {
//		ResourceSet rs = obj.eResource().getResourceSet();
//		EPackage.Registry reg = rs.getPackageRegistry();
//		// Insure that everything we need is registered
//		augmentRegistry(reg);
//	}

	// ======================== Validations / Checks =====================
	/**
	 * Every entity must have at least 2 characteristics.
	 * 
	 * @param ent
	 */
	@Check(CheckType.EXPENSIVE)
	public void checkCharacteristicCount(ConceptualEntity ent) {
		cev.checkCharacteristicCount(ent, this::error);
//		Map<String,ConceptualCharacteristic> chars = cep.getCharacteristics(ent);
//		if (chars.values().size() < 2) {
//			/**
//			 * Since we don't know if this ent has any composition elements declared locally, we just
//			 * attach the error to the name attribute
//			 */
//			error("Entity '" + ent.getName() + "' should have at least 2 characteristics",ent,
//					UddlPackage.eINSTANCE.getUddlElement_Name(), ENTITY_NEEDS_2_CHARACTERISTICS, ent.getName());
//		}
	}

	/**
	 * Every association must have at least 2 participants.
	 * 
	 * @param ent
	 */
	@Check(CheckType.EXPENSIVE)
	public void checkParticipantCount(ConceptualAssociation ent) {
		cev.checkParticipantCount(ent, this::error);
//		Map<String,ConceptualParticipant> chars = cep.getParticipants(ent);
//		if (chars.values().size() < 2) {
//			/**
//			 * Since we don't know if this association has any participants declared locally, we just
//			 * attach the error to the name attribute
//			 */
//			error("Association '" + ent.getName() + "' should have at least 2 participants",ent,
//					UddlPackage.eINSTANCE.getUddlElement_Name(), ASSOCIATION_NEEDS_2_PARTICIPANTS, ent.getName());
//		}
	}

	/**
	 * Every entity must have at least 2 characteristics.
	 * 
	 * @param ent
	 */
	@Check(CheckType.EXPENSIVE)
	public void checkCharacteristicCount(LogicalEntity ent) {
		lev.checkCharacteristicCount(ent, this::error);
//		Map<String,LogicalCharacteristic> chars = lep.getCharacteristics(ent);
//		if (chars.values().size() < 2) {
//			/**
//			 * Since we don't know if this ent has any composition elements declared locally, we just
//			 * attach the error to the name attribute
//			 */
//			error("Entity '" + ent.getName() + "' should have at least 2 characteristics",ent,
//					UddlPackage.eINSTANCE.getUddlElement_Name(), ENTITY_NEEDS_2_CHARACTERISTICS, ent.getName());
//		}
	}

	/**
	 * Every association must have at least 2 participants.
	 * 
	 * @param ent
	 */
	@Check(CheckType.EXPENSIVE)
	public void checkParticipantCount(LogicalAssociation ent) {
		lev.checkParticipantCount(ent, this::error);
//		Map<String,LogicalParticipant> chars = lep.getParticipants(ent);
//		if (chars.values().size() < 2) {
//			/**
//			 * Since we don't know if this association has any participants declared locally, we just
//			 * attach the error to the name attribute
//			 */
//			error("Association '" + ent.getName() + "' should have at least 2 participants",ent,
//					UddlPackage.eINSTANCE.getUddlElement_Name(), ASSOCIATION_NEEDS_2_PARTICIPANTS, ent.getName());
//		}
	}

	/**
	 * Every entity must have at least 2 characteristics.
	 * 
	 * @param ent
	 */
	@Check(CheckType.EXPENSIVE)
	public void checkCharacteristicCount(PlatformEntity ent) {
		pev.checkCharacteristicCount(ent, this::error);
//		Map<String,PlatformCharacteristic> chars = pep.getCharacteristics(ent);
//		if (chars.size() < 2) {
//			/**
//			 * Since we don't know if this ent has any composition elements declared locally, we just
//			 * attach the error to the name attribute
//			 */
//			error("Entity '" + ent.getName() + "' should have at least 2 characteristics",ent,
//					UddlPackage.eINSTANCE.getUddlElement_Name(), ENTITY_NEEDS_2_CHARACTERISTICS, ent.getName());
//		}
	}

	/**
	 * Every association must have at least 2 participants.
	 * 
	 * @param ent
	 */
	@Check(CheckType.EXPENSIVE)
	public void checkParticipantCount(PlatformAssociation ent) {
		pev.checkParticipantCount(ent, this::error);
//		Map<String,PlatformParticipant> chars = pep.getParticipants(ent);
//		if (chars.values().size() < 2) {
//			/**
//			 * Since we don't know if this association has any participants declared locally, we just
//			 * attach the error to the name attribute
//			 */
//			error("Association '" + ent.getName() + "' should have at least 2 participants",ent,
//					UddlPackage.eINSTANCE.getUddlElement_Name(), ASSOCIATION_NEEDS_2_PARTICIPANTS, ent.getName());
//		}
	}

}
